# ðŸ“¡ Engineering Task: Sensor Array Calibration Optimization

**Organization:** `{{company_name}}`  
**Department:** Research & Development  
**Date:** `{{current_date}}`  
**Priority:** Critical

---

### **Scenario**

{{scenario_context}}

Recalibration is costly and time-consuming. Your task is to write an algorithm that finds the most cost-effective way to perform this calibration. The "cost" of calibration is defined as the total number of unit adjustments needed across all sensors.

### **Your Mission**

You must implement a function, `{{function_name}}`, that takes a stream of sensor readings (`nums`) and determines the minimum total cost to calibrate at least `{{num_batches_to_calibrate}}` distinct, non-overlapping batches of sensors. Each batch must consist of exactly `{{batch_size}}` consecutive sensors.

Calibrating a batch means adjusting the readings of all sensors within that batch until they are all equal to the same value.

### **Technical Specifications**

Implement the Python function with the following signature:

```python
def {{function_name}}(nums: List[int], x: int, k: int) -> int:
```

Parameters:

nums (List[int]): A list of integers representing the raw {{data_unit}}.
x (int): The exact number of sensors in a single calibration batch.
k (int): The minimum number of non-overlapping batches that must be calibrated.
Returns:

int: The minimum possible total cost (number of operations).
### Examples

Example 1:

`nums = [5, -2, 1, 3, 7, 3, 6, 4, -1], x = 3, k = 2`
**Expected Output**: `8`
**Explanation**: The two cheapest batches to calibrate are [-2, 1, 3] (becomes [1, 1, 1], cost 5) and [3, 6, 4] (becomes [4, 4, 4], cost 3). Total cost = 8.

Example 2:

`nums = [9, -2, -2, -2, 1, 5], x = 2, k = 2`
**Expected Output**: `3`
**Explanation:** Calibrate [-2, -2] (cost 0) and [1, 5] (becomes [-2, -2] after adjustments, cost 3). Total cost = 3.

### Constraints
The dynamically generated inputs will adhere to these ranges:

- `1000 <= len(nums) <= 10000`
- `-1000 <= nums[i] <= 1000`
- `10 <= x <= 100`
- `2 <= k <= 15`
- `k * x <= len(nums)`

### How to Work
1. Decompose the Problem: This is a hard problem. Read the hints in solution.py to guide your thinking.
2. Implement: Write your solution in solution.py.
3. Test: Run python solution.py to execute your code against the dynamically generated task_data.json.
4. Submit: When ready, use the terminal command: `./scripts/submit.sh`
Good luck, engineer. Our production efficiency is in your hands.