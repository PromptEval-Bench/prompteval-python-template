#!/usr/bin/env python3
"""
Employee ID Validation System
{{company_name}} - Security Department

Task: Find smallest index where digit sum equals index
Author: [Your Name]
Date: {{current_date}}
"""

import json
from typing import List


def load_employee_data(filename: str = 'employee_data.json') -> dict:
    """
    Load employee data from JSON file.
    
    Args:
        filename: Path to employee data file
        
    Returns:
        Dictionary containing employee IDs and metadata
    """
    with open(filename, 'r') as f:
        return json.load(f)


def calculate_digit_sum(number: int) -> int:
    """
    Calculate the sum of digits in a number.
    
    Args:
        number: Integer to calculate digit sum for
        
    Returns:
        Sum of all digits in the number
        
    Examples:
        calculate_digit_sum(123) -> 1 + 2 + 3 = 6
        calculate_digit_sum(10) -> 1 + 0 = 1
        calculate_digit_sum(0) -> 0
    """
    # TODO: Implement digit sum calculation
    # Hint: You can use string conversion or mathematical approach
    
    pass


def {{function_name}}(employee_ids: List[int]) -> int:
    """
    Find the smallest index where the sum of digits equals the index.
    
    This function implements the core security validation logic:
    - For each employee ID at index i
    - Calculate sum of digits in employee_ids[i]
    - Check if digit_sum == i
    - Return the smallest such index, or -1 if none exists
    
    Args:
        employee_ids: List of employee ID numbers
        
    Returns:
        Smallest index where digit sum equals index, or -1 if none exists
        
    Time Complexity: O(n * log(max_id)) where n is array length
    Space Complexity: O(1)
    """
    
    # TODO: Implement the main logic here
    
    # Iterate through the array with indices
    # For each position, calculate digit sum
    # Check if digit sum equals current index
    # Return first match, or -1 if no match found
    
    pass


def validate_solution(employee_ids: List[int], result: int) -> bool:
    """
    Validate that the solution is correct.
    
    Args:
        employee_ids: Original employee ID array
        result: The returned index from find_digit_sum_index
        
    Returns:
        True if solution is valid, False otherwise
    """
    if result == -1:
        # Check that no valid index actually exists
        for i in range(len(employee_ids)):
            if calculate_digit_sum(employee_ids[i]) == i:
                return False  # Found a valid index but function returned -1
        return True
    else:
        # Check that the returned index is valid and is the smallest
        if result < 0 or result >= len(employee_ids):
            return False
        
        # Check that digit sum equals index at returned position
        if calculate_digit_sum(employee_ids[result]) != result:
            return False
        
        # Check that no smaller index is valid
        for i in range(result):
            if calculate_digit_sum(employee_ids[i]) == i:
                return False
        
        return True


def main():
    """
    Main function to load data and run validation.
    """
    # Load employee data
    data = load_employee_data()
    employee_ids = data['employee_ids']
    
    print(f"üè¢ Company: {data['company_name']}")
    print(f"üë• Processing {len(employee_ids)} employee IDs...")
    
    # Run the validation
    result = {{function_name}}(employee_ids)
    
    # Display results
    if result != -1:
        digit_sum = calculate_digit_sum(employee_ids[result])
        print(f"‚úÖ Valid employee found!")
        print(f"   Index: {result}")
        print(f"   Employee ID: {employee_ids[result]}")
        print(f"   Digit sum: {digit_sum}")
        print(f"   Validation: {digit_sum} == {result} ‚úì")
    else:
        print("‚ùå No valid employee ID found in the system")
    
    # Validate the solution
    if validate_solution(employee_ids, result):
        print("üîí Solution validation: PASSED")
    else:
        print("‚ö†Ô∏è  Solution validation: FAILED")
    
    return result


if __name__ == "__main__":
    main()