# üêû Bug Fix Task: Correct Sequence Generation in `codify` Utility

**Project:** `pydicom` Core Library  
**Assigned To:** You  
**Team:** `{{team_name}}`  
**Task ID:** `{{project_name}}`  
**Date:** `{{current_date}}`

---

### **1. Problem Summary**

We've received a critical bug report (pydicom-1674) from a user indicating that our `codify` utility fails to correctly generate runnable Python code for DICOM files that contain sequences (SQ). The generated script appears to create the sequence items but fails to properly attach them to the parent sequence within the main dataset. This results in a generated DICOM file that is missing all sequence data.

### **2. Bug Report Details**

**Observed Behavior:**
When a user runs `codify` on a DICOM file with sequences (e.g., an RDSR file), it produces a Python script. When this generated script is executed, the final `.dcm` file it saves is missing the entire sequence structure that was present in the original file.

**Expected Behavior:**
The DICOM file generated by the `codify` output script should be a faithful reproduction of the original file, including all sequences and their items.

**Original User's Steps to Reproduce:**
1.  `python codify.py OriginalFileWithSequence.dcm generated_script.py`
2.  `python generated_script.py`
3.  The file saved by `generated_script.py` is inspected and found to be missing the sequence data.

### **3. Your Mission**

Your task is to **debug and fix the logic in `codify.py`**. The root cause of the issue is believed to be in the `code_sequence` function, which is responsible for generating the Python code for `Sequence` data elements.

You must analyze how `code_sequence` interacts with `code_dataset` and `code_dataelem` and correct the logic so that the generated code correctly constructs the sequence and all its items, and properly appends those items to the sequence object.

### **4. Provided Files**

In your workspace, you will find:

-   **`codify.py`**: The buggy version of the script that you need to fix. This is your primary workspace.
-   **`test_case.dcm`**: A simple DICOM file containing a sequence, which will be used for testing.
-   **`test_runner.py`**: An automated script to test your fix.

### **5. How to Test Your Solution**

We have provided a `test_runner.py` script to simplify testing. It performs the following steps automatically:
1.  Uses your modified `codify.py` to generate code from `test_case.dcm`.
2.  Executes the generated code to create an `output.dcm` file.
3.  Reads both the original and output DICOM files using `pydicom`.
4.  Compares the sequence data in both files to verify your fix.

To run the test, simply execute the following command in your terminal:
```bash
python test_runner.py