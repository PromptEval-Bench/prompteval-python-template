# ðŸ“ˆ Quantitative Strategy Task: Optimizing Profit from Project Batches

**Organization:** `{{company_name}}`  
**Department:** Quantitative Strategy Division  
**Date:** `{{current_date}}`  
**Security Clearance:** Top Secret

---

### **Scenario**

{{company_scenario}}

### **Your Mission**

You are tasked with developing a core function for our new optimization engine. This function, `{{function_name}}`, will analyze a list of projected daily profits and losses (`nums`) and determine the maximum possible total profit by selecting exactly `{{k_subarrays}}` distinct, non-overlapping "project batches".

A critical constraint from our risk management department is that each selected project batch must have a minimum duration of `{{m_min_length}}` consecutive days.

### **Technical Specifications**

Implement the Python function with the following signature:

```python
def {{function_name}}(nums: List[int], k: int, m: int) -> int:
```

Parameters:

- `nums` (`List[int]`): A list of integers representing the {{data_unit}}.
- `k` (`int`): The exact number of non-overlapping project batches to select.
- `m` (`int`): The minimum number of consecutive days for each project batch.
Returns:

- `int`: The maximum achievable total profit.

### Examples

Example 1:

- `nums = [1, 2, -1, 3, 3, 4]`
- `k = 2`
- `m = 2`
**Expected Output:** `13`
**Explanation:** The optimal choice is subarray [3, 3, 4] (sum=10, length=3) and subarray [1, 2] (sum=3, length=2). Total sum = 13.

Example 2:

- `nums = [-10, 3, -1, -2]`
- `k = 4`
- `m = 1`
**Expected Output**: `-10`
**Explanation**: The optimal choice is to select each element as a separate subarray. The sum is (-10) + 3 + (-1) + (-2) = -10.
Constraints
The dynamically generated inputs for this task will adhere to the following constraints:

- `50 <= len(nums) <= 200`
- `-100 <= nums[i] <= 100`
- `2 <= k <= 10`
- `1 <= m <= 5`
- `k * m <= len(nums)`